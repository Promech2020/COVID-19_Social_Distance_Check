# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'SocialDistanceCheck.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication,QWidget, QVBoxLayout, QPushButton, QFileDialog , QLabel, QTextEdit, QMessageBox
from social_distance_check import check_social_distance

class Ui_MainWindow(QWidget):

    #Variables to send
    file_path = ""
    minimum_dist = ""
    time_to_wait_before = ""
    time_to_wait_between = "" 

    def setupUi(self, MainWindow):
        self.window = MainWindow
        MainWindow.setObjectName("SocialDistanceCheck")
        MainWindow.resize(522, 300)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(480, 250))
        MainWindow.setMaximumSize(QtCore.QSize(550, 300))
        MainWindow.setDocumentMode(False)
        MainWindow.setUnifiedTitleAndToolBarOnMac(False)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setMinimumSize(QtCore.QSize(480, 250))
        self.centralwidget.setMaximumSize(QtCore.QSize(550, 300))
        self.centralwidget.setBaseSize(QtCore.QSize(480, 250))
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.gridLayout.setContentsMargins(15, 15, 15, 15)
        self.gridLayout.setHorizontalSpacing(35)
        self.gridLayout.setVerticalSpacing(10)
        self.gridLayout.setObjectName("gridLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")

        #Input Video file Label
        self.input_video_file_label = QtWidgets.QLabel(self.centralwidget)
        self.input_video_file_label.setObjectName("input_video_file_label")
        self.gridLayout.addWidget(self.input_video_file_label, 0, 0, 1, 1)

        #Webcam button
        self.select_webcam_button = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.select_webcam_button.sizePolicy().hasHeightForWidth())
        self.select_webcam_button.setSizePolicy(sizePolicy)
        self.select_webcam_button.setObjectName("select_webcam_button")
        self.horizontalLayout.addWidget(self.select_webcam_button)
        self.select_webcam_button.clicked.connect(self.webcam_clicked)

        #Browse Button
        self.browse_video_file_button = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.browse_video_file_button.sizePolicy().hasHeightForWidth())
        self.browse_video_file_button.setSizePolicy(sizePolicy)
        self.browse_video_file_button.setObjectName("browse_video_file_button")
        self.horizontalLayout.addWidget(self.browse_video_file_button)
        self.gridLayout.addLayout(self.horizontalLayout, 0, 1, 1, 1)
        self.browse_video_file_button.clicked.connect(self.browse_files)



        #Minimum distance label
        self.minimum_distance_input_label = QtWidgets.QLabel(self.centralwidget)
        self.minimum_distance_input_label.setObjectName("minimum_distance_input_label")
        self.gridLayout.addWidget(self.minimum_distance_input_label, 1, 0, 1, 1)

        #Minimum distance between people
        self.minimum_distance_combo_box = QtWidgets.QComboBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.minimum_distance_combo_box.sizePolicy().hasHeightForWidth())
        self.minimum_distance_combo_box.setSizePolicy(sizePolicy)
        self.minimum_distance_combo_box.setStatusTip("")
        self.minimum_distance_combo_box.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.minimum_distance_combo_box.setEditable(False)
        self.minimum_distance_combo_box.setInsertPolicy(QtWidgets.QComboBox.InsertBeforeCurrent)
        self.minimum_distance_combo_box.setObjectName("minimum_distance_combo_box")
        self.minimum_distance_combo_box.addItem("")
        self.minimum_distance_combo_box.addItem("")
        self.minimum_distance_combo_box.addItem("")
        self.minimum_distance_combo_box.addItem("")
        self.minimum_distance_combo_box.addItem("")
        self.minimum_distance_combo_box.addItem("")
        self.gridLayout.addWidget(self.minimum_distance_combo_box, 1, 1, 1, 1)

        #Time to wait before starting warning label
        self.time_to_wait_to_start_label = QtWidgets.QLabel(self.centralwidget)
        self.time_to_wait_to_start_label.setObjectName("time_to_wait_to_start_label")
        self.gridLayout.addWidget(self.time_to_wait_to_start_label, 2, 0, 1, 1)

        #Time to wait before starting warning
        self.time_to_wait_to_start_combo_box = QtWidgets.QComboBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.time_to_wait_to_start_combo_box.sizePolicy().hasHeightForWidth())
        self.time_to_wait_to_start_combo_box.setSizePolicy(sizePolicy)
        self.time_to_wait_to_start_combo_box.setObjectName("time_to_wait_to_start_combo_box")
        self.time_to_wait_to_start_combo_box.addItem("")
        self.time_to_wait_to_start_combo_box.addItem("")
        self.time_to_wait_to_start_combo_box.addItem("")
        self.time_to_wait_to_start_combo_box.addItem("")
        self.time_to_wait_to_start_combo_box.addItem("")
        self.time_to_wait_to_start_combo_box.addItem("")
        self.time_to_wait_to_start_combo_box.addItem("")
        self.time_to_wait_to_start_combo_box.addItem("")
        self.time_to_wait_to_start_combo_box.addItem("")
        self.time_to_wait_to_start_combo_box.addItem("")
        self.time_to_wait_to_start_combo_box.addItem("")
        self.time_to_wait_to_start_combo_box.addItem("")
        self.gridLayout.addWidget(self.time_to_wait_to_start_combo_box, 2, 1, 1, 1)

        #Time to wait between warning label
        self.time_to_wait_in_between_label = QtWidgets.QLabel(self.centralwidget)
        self.time_to_wait_in_between_label.setObjectName("time_to_wait_in_between_label")
        self.gridLayout.addWidget(self.time_to_wait_in_between_label, 3, 0, 1, 1)

        #Time to wait between warnings
        self.time_to_wait_in_between = QtWidgets.QComboBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.time_to_wait_in_between.sizePolicy().hasHeightForWidth())
        self.time_to_wait_in_between.setSizePolicy(sizePolicy)
        self.time_to_wait_in_between.setObjectName("time_to_wait_in_between")
        self.time_to_wait_in_between.addItem("")
        self.time_to_wait_in_between.addItem("")
        self.time_to_wait_in_between.addItem("")
        self.time_to_wait_in_between.addItem("")
        self.time_to_wait_in_between.addItem("")
        self.time_to_wait_in_between.addItem("")
        self.time_to_wait_in_between.addItem("")
        self.time_to_wait_in_between.addItem("")
        self.time_to_wait_in_between.addItem("")
        self.time_to_wait_in_between.addItem("")
        self.time_to_wait_in_between.addItem("")
        self.time_to_wait_in_between.addItem("")
        self.gridLayout.addWidget(self.time_to_wait_in_between, 3, 1, 1, 1)

        #Proceed button
        self.proceed_to_detection_button = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.proceed_to_detection_button.sizePolicy().hasHeightForWidth())
        self.proceed_to_detection_button.setSizePolicy(sizePolicy)
        self.proceed_to_detection_button.setObjectName("proceed_to_detection_button")
        self.gridLayout.addWidget(self.proceed_to_detection_button, 5, 1, 1, 1)
        self.proceed_to_detection_button.clicked.connect(self.proceed_processing)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 522, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)

        self.time_to_wait_to_start_combo_box.setCurrentIndex(5)
        self.minimum_distance_combo_box.setCurrentIndex(3)
        self.time_to_wait_in_between.setCurrentIndex(5)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def webcam_clicked(self):
        self.file_path  = "WebCam"
        # print(self.file_path)

    def browse_files(self):
        fname = QFileDialog.getOpenFileName(self, 'Open file','c:/', "Video files (*.mp4 *.avi)")
        videoPath = fname[0]
        self.file_path = videoPath
        # print(self.file_path)

    def proceed_processing(self):
        self.minimum_dist = self.minimum_distance_combo_box.currentText()
        self.time_to_wait_before = self.time_to_wait_to_start_combo_box.currentText()
        self.time_to_wait_between = self.time_to_wait_in_between.currentText()
        
        if self.file_path == "":
            self.show_pop_up_1()
        else:
            self.show_pop_up_2()

    def show_pop_up_1(self):
        self.msg1 = QMessageBox()
        self.msg1.setWindowTitle("No Video Path")
        self.msg1.setText("You have neither selected webcam, nor given any video file path. We will proceed with our default video.")
        self.msg1.setIcon(QMessageBox.Warning)
        self.msg1.setStandardButtons(QMessageBox.Ok|QMessageBox.Cancel)
        self.msg1.setDefaultButton(QMessageBox.Cancel)
        self.msg1.buttonClicked.connect(self.pop_up_button1)
        x1 = self.msg1.exec_()

    def pop_up_button1(self, i):
        if i.text() == "OK":
            self.msg1.close()
            MainWindow.close()
            check_social_distance(self.file_path, self.minimum_dist, self.time_to_wait_before, self.time_to_wait_between)
            

    def show_pop_up_2(self):
        self.msg2 = QMessageBox()
        self.msg2.setWindowTitle("Confirmation")
        self.msg2.setText(f"Your have selected:\n \
                    {self.file_path} as video input.\n \
                    {self.minimum_dist} as minimum distance to maintain between people.\n \
                    {self.time_to_wait_before} as time to wait before starting to play warning. \n \
                    {self.time_to_wait_between} as time to wait between playing warnings.")
        self.msg2.setIcon(QMessageBox.Information)
        self.msg2.setStandardButtons(QMessageBox.Ok|QMessageBox.Cancel)
        self.msg2.setDefaultButton(QMessageBox.Cancel)
        self.msg2.buttonClicked.connect(self.pop_up_button2)
        x2 = self.msg2.exec_()

    def pop_up_button2(self, j):
        if j.text() == "OK":
            self.msg2.close()
            MainWindow.close()
            check_social_distance(self.file_path, self.minimum_dist, self.time_to_wait_before, self.time_to_wait_between)
            
            

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.select_webcam_button.setText(_translate("MainWindow", "WebCam"))
        self.browse_video_file_button.setText(_translate("MainWindow", "Browse"))
        self.input_video_file_label.setText(_translate("MainWindow", "Input video file:"))
        self.minimum_distance_input_label.setText(_translate("MainWindow", "Minimum distance to maintain between people:"))
        self.proceed_to_detection_button.setText(_translate("MainWindow", "Proceed"))
        self.time_to_wait_in_between.setItemText(0, _translate("MainWindow", "5 Seconds"))
        self.time_to_wait_in_between.setItemText(1, _translate("MainWindow", "10 Seconds"))
        self.time_to_wait_in_between.setItemText(2, _translate("MainWindow", "15 Seconds"))
        self.time_to_wait_in_between.setItemText(3, _translate("MainWindow", "20 Seconds"))
        self.time_to_wait_in_between.setItemText(4, _translate("MainWindow", "25 Seconds"))
        self.time_to_wait_in_between.setItemText(5, _translate("MainWindow", "30 Seconds"))
        self.time_to_wait_in_between.setItemText(6, _translate("MainWindow", "35 Seconds"))
        self.time_to_wait_in_between.setItemText(7, _translate("MainWindow", "40 Seconds"))
        self.time_to_wait_in_between.setItemText(8, _translate("MainWindow", "45 Seconds"))
        self.time_to_wait_in_between.setItemText(9, _translate("MainWindow", "50 Seconds"))
        self.time_to_wait_in_between.setItemText(10, _translate("MainWindow", "55 Seconds"))
        self.time_to_wait_in_between.setItemText(11, _translate("MainWindow", "60 Seconds"))
        self.time_to_wait_in_between_label.setText(_translate("MainWindow", "Time to wait between playing warnings:"))
        self.time_to_wait_to_start_label.setText(_translate("MainWindow", "Time to wait before playing warning:"))
        self.time_to_wait_to_start_combo_box.setItemText(0, _translate("MainWindow", "5 Seconds"))
        self.time_to_wait_to_start_combo_box.setItemText(1, _translate("MainWindow", "10 Seconds"))
        self.time_to_wait_to_start_combo_box.setItemText(2, _translate("MainWindow", "15 Seconds"))
        self.time_to_wait_to_start_combo_box.setItemText(3, _translate("MainWindow", "20 Seconds"))
        self.time_to_wait_to_start_combo_box.setItemText(4, _translate("MainWindow", "25 Seconds"))
        self.time_to_wait_to_start_combo_box.setItemText(5, _translate("MainWindow", "30 Seconds"))
        self.time_to_wait_to_start_combo_box.setItemText(6, _translate("MainWindow", "35 Seconds"))
        self.time_to_wait_to_start_combo_box.setItemText(7, _translate("MainWindow", "40 Seconds"))
        self.time_to_wait_to_start_combo_box.setItemText(8, _translate("MainWindow", "45 Seconds"))
        self.time_to_wait_to_start_combo_box.setItemText(9, _translate("MainWindow", "50 Seconds"))
        self.time_to_wait_to_start_combo_box.setItemText(10, _translate("MainWindow", "55 Seconds"))
        self.time_to_wait_to_start_combo_box.setItemText(11, _translate("MainWindow", "60 Seconds"))
        self.minimum_distance_combo_box.setItemText(0, _translate("MainWindow", "0.5 Meters"))
        self.minimum_distance_combo_box.setItemText(1, _translate("MainWindow", "1 Meters"))
        self.minimum_distance_combo_box.setItemText(2, _translate("MainWindow", "1.5 Meters"))
        self.minimum_distance_combo_box.setItemText(3, _translate("MainWindow", "2 Meters"))
        self.minimum_distance_combo_box.setItemText(4, _translate("MainWindow", "2.5 Meters"))
        self.minimum_distance_combo_box.setItemText(5, _translate("MainWindow", "3 Meters"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
